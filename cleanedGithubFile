############################# necessary packages ###############################
library(imputeTS)
library(tidyverse)
library(dplyr)
library(rpart)
library(pROC)
library(lattice)
library(caret)
library(ggplot2)
library(mi)
library(missForest)
library(itertools)
library(foreach)
library(mice)
library(purrr)
library(Boruta)
library(mltest)
library(e1071) 


########################### loading in the json files ##########################
json_files <- list.files(pattern = "*.json")
for(i in length(json_files)){
  yelp <- fromJSON(json_files[i])
}

############################ body part dataset #################################
#appending the per person results of different videos into one dataframe
df_people <- data.frame(json_data[[1]]$people)

for (i in 2:300){
  people <- data.frame(json_data[[i]]$people)
  df_people <- rbind(df_people, people)
  rm(people)
}

#appending the ID's for the people belonging to each video to the people
#data frame
#those with similar ID's belong to the same frame
df_nr_people <- data.frame(1)
df_nr_people <- rbind(df_nr_people,(1))

for (i in 2:300){
  nr_people <- data.frame(length(json_data[[i]]$people$person_id))
  for (j in 1:(length(json_data[[i]]$people$person_id))+1){
    df_nr_people <- rbind(df_nr_people, i)
  }
}

#changing the column name of the dataframe df_nr_people
names(df_nr_people)
df_nr_people <- df_nr_people %>% 
  rename(ID = X1)

#adding the df_nr_people to df_people
#removing the old person id column from the new dataframe
#removing 3d columns since they don't apply to the data
df_ID_people <-
  cbind(df_nr_people ,df_people) %>%
  select(-c(person_id, pose_keypoints_3d, face_keypoints_3d, 
            hand_left_keypoints_3d, hand_right_keypoints_3d))
colnames(df_ID_people)

#split the body keypoints in separate columns
#removing columns that will nog be used for this research
df_ID_people <- df_ID_people %>% 
  separate(pose_keypoints_2d, into = c("x_Nose", "y_Nose", "c_Nose", "x_Neck", 
                                       "y_neck", "c_neck", "x_RShoulder", 
                                       "y_RShoulder", "c_RShoulder", "x_RElbow", 
                                       "y_RElbow", "c_RElbow", "x_RWrist", 
                                       "y_RWrist", "c_RWrist", "x_LShoulder", 
                                       "y_LShoulder", "c_LShoulder", "x_LElbow", 
                                       "y_LElbow", "c_LElbow", "x_LWrist", 
                                       "y_LWrist", "c_LWrist", "x_MidHip", 
                                       "y_MidHip", "c_MidHip", "x_RHip", 
                                       "y_RHip", "c_RHip", "x_RKnee", "y_RKnee", 
                                       "c_RKnee", "x_RAnkle", "y_RAnkle", 
                                       "c_RAnkle", "x_LHip", "y_LHip", "c_LHip", 
                                       "x_LKnee", "y_LKnee", "c_LKnee",
                                       "x_LAnkle", "y_LAnkle", "c_LAnkle", 
                                       "x_REye", "y_REye", "c_REye", "x_LEye", 
                                       "y_LEye", "c_LEye", "x_REar", "y_REar", 
                                       "c_REar", "x_LEar", "y_LEar", "c_LEar")
           ,sep = "([\\,])")

#removing (, ) and c from the x_nose column
df_ID_people$x_Nose <- stringr::str_replace(df_ID_people$x_Nose, '\\(', '')
df_ID_people$x_Nose <- stringr::str_replace(df_ID_people$x_Nose, '\\c', '')

#removing other columns of body parts that will not be used
df_ID_people <- df_ID_people %>%
  select(-c(x_RKnee, y_RKnee, c_RKnee, x_RAnkle, y_RAnkle, c_RAnkle, x_LKnee,
            y_LKnee, c_LKnee, x_LAnkle, y_LAnkle, c_LAnkle, ))

# removing the probabilities of the particular body parts
df_ID_noC <- df_ID_people %>%
  select(-c(c_Nose, c_neck, c_RShoulder, c_RElbow, c_RWrist, c_LShoulder,
            c_LElbow, c_LWrist, c_MidHip, c_RHip, c_LHip, c_REye, c_LEye,
            c_REar, c_LEar, hand_left_keypoints_2d, hand_right_keypoints_2d,
            face_keypoints_2d)) %>%
  mutate_if(is.character,as.numeric)

################## Final cleaned dataset for computation #######################
cleaned_body_parts <- df_ID_noC
cleaned_test_bodyParts <- cleaned_body_parts
rm(df_ID_noC)
rm(df_ID_people)
rm(df_nr_people)
rm(df_people)
rm(nr_people)

###################### computations on final dataset ###########################
# the cleaned dataset
cleaned_set <- cleaned_body_parts

###################### giving na values to missing rows ########################
no_dist <- cleaned_body_parts %>%
  select(ID) %>%
  group_by(ID) %>%
  distinct()

no_dist <- no_dist[c(73, 74, 85, 102, 109, 114, 116, 117, 121, 122,  124, 133, 
                     134, 142, 146, 152, 165, 176, 203, 204, 209, 210, 217, 
                     222, 224, 227, 230, 231, 232, 233, 234, 235, 245, 246, 
                     249, 262, 265, 289, 292, 295),]

# give all frames that only have one persons available a missing value
# so the two dataframes can be bound together
no_dist['x_Nose'] <- NA
no_dist['y_Nose'] <- NA
no_dist['x_Neck'] <- NA
no_dist['y_neck'] <- NA
no_dist['x_RShoulder'] <- NA
no_dist['y_RShoulder'] <- NA
no_dist['x_RElbow'] <- NA
no_dist['y_RElbow'] <- NA
no_dist['x_RWrist'] <- NA
no_dist['y_RWrist'] <- NA
no_dist['x_LShoulder'] <- NA
no_dist['y_LShoulder'] <- NA
no_dist['x_LElbow'] <- NA
no_dist['y_LElbow'] <- NA
no_dist['x_LWrist'] <- NA
no_dist['y_LWrist'] <- NA
no_dist['x_MidHip'] <- NA
no_dist['y_MidHip'] <- NA
no_dist['x_RHip'] <- NA
no_dist['y_RHip'] <- NA
no_dist['x_LHip'] <- NA
no_dist['y_LHip'] <- NA
no_dist['x_REye'] <- NA
no_dist['y_REye'] <- NA
no_dist['x_LEye'] <- NA
no_dist['y_LEye'] <- NA
no_dist['x_REar'] <- NA
no_dist['y_REar'] <- NA
no_dist['x_LEar'] <- NA
no_dist['y_LEar'] <- NA

x<- rbind(cleaned_set, no_dist)
x <- x %>%
  arrange(ID)

cleaned_set <- x %>%
  ungroup()

################### impute missing values with rforest #########################
i <- cleaned_set$ID

impute_missing_df <- cleaned_set %>%
  select(-c(ID))

impute_missing_df.mis <- prodNA(impute_missing_df, noNA = 0.1)
summary(impute_missing_df.mis)

set.seed(1)
impute_missing_df.imp <- missForest(impute_missing_df.mis)
impute_missing_df.imp$ximp
impute_missing_df.imp$OOBerror #the error of the forest

imputed_missing_df <- impute_missing_df.imp$ximp %>%
  add_column(ID = i, .before = 1) 

####################################################### df body distance minimal
# create distance for the nose dataset
body_distance <- imputed_missing_df %>%
  select(ID, x_Nose, y_Nose, 
         x_Neck, y_neck,
         x_RShoulder, y_RShoulder, 
         x_RElbow, y_RElbow, 
         x_RWrist, y_RWrist, 
         x_LShoulder, y_LShoulder, 
         x_LElbow, y_LElbow, 
         x_LWrist, y_LWrist, 
         x_MidHip, y_MidHip, 
         x_RHip, y_RHip, 
         x_LHip, y_LHip, 
         x_REye, y_REye, 
         x_LEye, y_LEye, 
         x_REar, y_REar, 
         x_LEar, y_LEar)

# all same ID pairs are substracted by each other on the variables given
# So the values of the nose of person 1 in frame 1 is substracted from
# the nose of person 2 in frame 1. But person 1 is not substracted from
# person 1, person 2 not from person 2 etc. So all possible combinations
# within the same ID are shown
body_distance <- body_distance%>%
  group_by(ID) %>%
  mutate(row = row_number()) %>%
  split(.$ID) %>%
  map(
    ~nest(., data = -c(ID, row)) %>%
      list(.,.) %>%
      reduce(full_join, by = "ID") %>%
      rename(row1 = row.x, row2 = row.y, vec1 = data.x, vec2 = data.y) %>%
      filter(row1 != row2) %>%
      mutate(diff = map2(vec1, vec2, ~unlist(.x)-unlist(.y)))%>%
      select(-vec1, -vec2) %>%
      unnest_wider(col = diff)
  ) %>%
  bind_rows()

# here the euclidean distance between the same joints are calculated
# we already calculated the difference of all the possible body pairs above
# now we have to finish the calculation by computing the ^2 over the difference
# values for the x and the y value of that body part difference
# then we add the calculation of the x and y body part up. Then we
# compute the square root of that result and that gives us the euclidean distance
# of all possible combinations of people in the same video. 
# the reason for 
body_distance <- body_distance %>%
  mutate(x_Nose_2 = x_Nose ^ 2, 
         y_Nose_2 = y_Nose ^ 2,
         x_Neck_2 = x_Neck ^ 2,
         y_neck_2 = y_neck ^ 2,
         x_RShoulder_2 = x_RShoulder ^ 2,
         y_RShoulder_2 = y_RShoulder ^ 2, 
         x_RElbow_2 = x_RElbow ^ 2, 
         y_RElbow_2 = y_RElbow ^ 2, 
         x_RWrist_2 = x_RWrist ^ 2, 
         y_RWrist_2 = y_RWrist ^ 2, 
         x_LShoulder_2 = x_LShoulder ^ 2, 
         y_LShoulder_2 = y_LShoulder ^ 2, 
         x_LElbow_2 = x_LElbow ^ 2, 
         y_LElbow_2 = y_LElbow ^ 2, 
         x_LWrist_2 = x_LWrist ^ 2, 
         y_LWrist_2 = y_LWrist ^ 2, 
         x_MidHip_2 = x_MidHip ^ 2, 
         y_MidHip_2 = y_MidHip ^ 2, 
         x_RHip_2 = x_RHip ^ 2, 
         y_RHip_2 = y_RHip ^ 2, 
         x_LHip_2 = x_LHip ^ 2, 
         y_LHip_2 = y_LHip ^ 2, 
         x_REye_2 = x_REye ^ 2,
         y_REye_2 = y_REye ^ 2,
         x_LEye_2 = x_LEye ^2,
         y_LEye_2 = y_LEye ^ 2, 
         x_REar_2 = x_REar ^ 2,
         y_REar_2 = y_REar ^ 2,
         x_LEar_2 = x_LEar ^ 2,
         y_LEar_2 = y_LEar ^ 2) %>%
  mutate(nose_dif = x_Nose_2 + y_Nose_2,
         neck_dif = x_Neck_2 + y_neck_2,
         Rshoulder_dif = x_RShoulder_2 + y_RShoulder_2,
         Relbow_dif = x_RElbow_2 + y_RElbow_2,
         Rwrist_dif = x_RWrist_2 + y_RWrist_2,
         Lshoulder_dif = x_LShoulder_2 + y_LShoulder_2,
         Lelbow_dif = x_LElbow_2 + y_LElbow_2, 
         Lwrist_dif = x_LWrist_2 + y_LWrist_2,
         MidHip_dif = x_MidHip_2 + y_MidHip_2,
         Rhip_dif = x_RHip_2 + y_RHip_2, 
         LHip_dif = x_LHip_2 + y_LHip_2,
         REye_dif = x_REye_2 + y_REye_2,
         LEye_diff = x_LEye_2 + y_LEye_2, 
         REar_diff= x_REar_2 + y_REar_2,
         LEar_diff = x_LEar_2 + y_LEar_2) %>%
  mutate(nose_dif = sqrt(nose_dif),
         neck_dif = sqrt(neck_dif),
         Rshoulder_dif = sqrt(Rshoulder_dif),
         Relbow_dif = sqrt(Relbow_dif),
         Rwrist_dif = sqrt(Rwrist_dif),
         Lshoulder_dif = sqrt(Lshoulder_dif),
         Lelbow_dif = sqrt(Lelbow_dif),
         Lwrist_dif = sqrt(Lwrist_dif),
         MidHip_dif = sqrt(MidHip_dif),
         Rhip_dif = sqrt(Rhip_dif),
         LHip_dif = sqrt(LHip_dif),
         REye_dif = sqrt(REye_dif),
         LEye_diff = sqrt(LEye_diff), 
         REar_diff= sqrt(REar_diff),
         LEar_diff = sqrt(LEar_diff)) 

body_distance <- body_distance %>%
  select(ID, 
         x_Nose,
         y_Nose,
         x_Neck,
         y_neck,
         x_RShoulder,
         y_RShoulder,
         x_RElbow, 
         y_RElbow, 
         x_RWrist, 
         y_RWrist, 
         x_LShoulder, 
         y_LShoulder, 
         x_LElbow, 
         y_LElbow, 
         x_LWrist, 
         y_LWrist, 
         x_MidHip, 
         y_MidHip, 
         x_RHip, 
         y_RHip, 
         x_LHip, 
         y_LHip, 
         x_REye,
         y_REye,
         x_LEye,
         y_LEye,
         x_REar,
         y_REar,
         x_LEar,
         nose_dif, 
         neck_dif, 
         Rshoulder_dif,
         Relbow_dif,
         Rwrist_dif,
         Lshoulder_dif,
         Lelbow_dif,
         Lwrist_dif,
         MidHip_dif,
         Rhip_dif,
         LHip_dif,
         REye_dif, 
         LEye_diff, 
         REar_diff,
         LEar_diff)


body_distance <- na_mean(body_distance, "mean")
body_distance$mean= rowMeans(body_distance[,31:45], na.rm=TRUE)

# arrange the dataframe by group and by value
body_distance <- body_distance %>%
  group_by(ID) %>%
  arrange(mean, .by_group = TRUE) %>%
  top_n(-2, mean)


# for the least difference just keep one of the two row mean values since 
# they are the same
least_body_distance <- body_distance %>%
  group_by(ID) %>%
  slice(which.min(mean))

####
# for least body distance the varbiable to use is; least_body_distance

########################################################### difference dataframe
body_distance <- imputed_missing_df %>%
  select(ID, x_Nose, y_Nose, 
         x_Neck, y_neck,
         x_RShoulder, y_RShoulder, 
         x_RElbow, y_RElbow, 
         x_RWrist, y_RWrist, 
         x_LShoulder, y_LShoulder, 
         x_LElbow, y_LElbow, 
         x_LWrist, y_LWrist, 
         x_MidHip, y_MidHip, 
         x_RHip, y_RHip, 
         x_LHip, y_LHip, 
         x_REye, y_REye, 
         x_LEye, y_LEye, 
         x_REar, y_REar, 
         x_LEar, y_LEar)

####################################################  right shoulder elbow angle
# for the right elbow and right shoulder
angles <- body_distance %>%
  select(ID, x_RShoulder, y_RShoulder, x_RElbow, y_RElbow, x_RWrist, y_RWrist)

#computing the angle of a which should be the elbow
# a = elbow
# b = shoulder
# c = wrist
angles <- angles %>%
  na.omit(angles) %>%
  mutate(a = sqrt(((x_RShoulder - x_RWrist)^2) + ((y_RShoulder - y_RWrist)^2))) %>%
  mutate(b = sqrt(((x_RElbow - x_RWrist)^2) + ((y_RElbow - y_RWrist)^2))) %>%
  mutate(c = sqrt(((x_RElbow - x_RShoulder)^2) + ((y_RElbow - y_RShoulder)^2))) %>%
  mutate(a2 = a^2) %>%
  mutate(b2 = b^2) %>%
  mutate(c2 = c^2) %>%
  mutate(cosA = ((b2+c2-a2) / (2*b*c))) %>%
  mutate(rad = acos(cosA)) %>%
  mutate(angle_degrees = rad * (180/pi)) %>%
  select(ID, angle_degrees)%>%
  group_by(ID) %>%
  slice(which.min(angle_degrees))

angles <- angles %>%
  ungroup()

rShoulderElbowAngle <- angles %>%
  select(angle_degrees)

### the variable for the right shoulder elbow angle is rShoulderElbowAngle

########################################### for the left elbow and left shoulder
angles <- body_distance %>%
  select(ID, x_LShoulder, y_LShoulder, x_LElbow, y_LElbow, x_LWrist, y_LWrist)

#computing the angle of a which should be the elbow
# a = elbow
# b = shoulder
# c = wrist
angles <- angles %>%
  na.omit(angles) %>%
  mutate(a = sqrt(((x_LShoulder - x_LWrist)^2) + ((y_LShoulder - y_LWrist)^2))) %>%
  mutate(b = sqrt(((x_LElbow - x_LWrist)^2) + ((y_LElbow - y_LWrist)^2))) %>%
  mutate(c = sqrt(((x_LElbow - x_LShoulder)^2) + ((y_LElbow - y_LShoulder)^2))) %>%
  mutate(a2 = a^2) %>%
  mutate(b2 = b^2) %>%
  mutate(c2 = c^2) %>%
  mutate(cosA = ((b2+c2-a2) / (2*b*c))) %>%
  mutate(rad = acos(cosA)) %>%
  mutate(angle_degrees = rad * (180/pi)) %>%
  select(ID, angle_degrees)%>%
  group_by(ID) %>%
  slice(which.min(angle_degrees))

angles <- angles %>%
  ungroup()

lShoulderElbowAngle <- angles %>%
  select(angle_degrees)

rm(angles)
rm(no_angles)
rm(i)
rm(x)

#####################  right shoulderWristDiff #################################
elbow_shoulder_df <- body_distance %>%
  select(ID, y_RElbow, y_RShoulder, y_LElbow, y_LShoulder)

elbow_shoulder_df <- elbow_shoulder_df %>%
  group_by(ID) %>%
  mutate(y_lElbow_lShoulder = y_LShoulder - y_LElbow) %>%
  mutate(y_rElbow_rShoulder = y_RShoulder - y_RElbow)

sum_size_yL <- elbow_shoulder_df %>%
  group_by(ID) %>%
  summarize(sumY_lElbow_lShoulder = sum(y_lElbow_lShoulder, na.rm = TRUE))

sum_size_yR<- elbow_shoulder_df %>%
  group_by(ID) %>%
  summarize(sumY_RElbow_RShoulder = sum(y_rElbow_rShoulder, na.rm = TRUE))

shoulder_elbow_R <- sum_size_yR$sumY_RElbow_RShoulder
shoulder_elbow_L <- sum_size_yL$sumY_lElbow_lShoulder

#for the right shoulder and elbow
RshoudlerElbowDifference_sum <- as.data.frame(shoulder_elbow_R)
RshoudlerElbowDifference_sum[RshoudlerElbowDifference_sum == 0] <- NA

#for the left shoulder and elbow
LshoudlerElbowDifference_sum <- as.data.frame(shoulder_elbow_L)
LshoudlerElbowDifference_sum[LshoudlerElbowDifference_sum == 0] <- NA

rm(elbow_shoulder_df)
rm(sum_size_yL)
rm(shoulder_elbow_R)
rm(sum_size_yR)

############################################################### Add to dataframe
least_body_distance <- least_body_distance %>%
  ungroup() %>%
  add_column(RshoulderElbowAngle = rShoulderElbowAngle$angle_degrees) %>%
  add_column(lshoulderElbowAngle = lShoulderElbowAngle$angle_degrees) %>%
  add_column(YLshoulderWristDiff = LshoudlerElbowDifference_sum$shoulder_elbow_L) %>%
  add_column(YRshoulderWristDiff = RshoudlerElbowDifference_sum$shoulder_elbow_R) %>%
  select(nose_dif, 
         neck_dif, 
         Rshoulder_dif, 
         Relbow_dif, 
         Rwrist_dif, 
         Lshoulder_dif, 
         Lelbow_dif, 
         Lwrist_dif, 
         MidHip_dif, 
         Rhip_dif, 
         LHip_dif, 
         REye_dif, 
         LEye_diff, 
         REar_diff, 
         LEar_diff,
         RshoulderElbowAngle,
         lshoulderElbowAngle,
         YLshoulderWristDiff,
         YRshoulderWristDiff,
         mean) %>%
  add_column(y_true)

############################################################## 
#create a train and test set
train_set <- least_body_distance
test_set <- least_body_distance

# convert outcome variable from characters to numbers
train_set <- train_set %>%
  mutate(y_true = case_when(
    y_true == 'handShake'  ~ 0,
    y_true == 'highFive'  ~ 1,
    y_true == 'hug'  ~ 2,
    y_true == 'kiss' ~ 3,
    y_true == 'negative' ~ 4))

test_set <- test_set %>%
  mutate(y_true = case_when(
    y_true == 'handShake'  ~ 0,
    y_true == 'highFive'  ~ 1,
    y_true == 'hug'  ~ 2,
    y_true == 'kiss' ~ 3,
    y_true == 'negative' ~ 4))


train_set <- train_set[c(1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 22, 23, 
                         29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 52, 53, 54, 
                         55, 64, 65, 66, 67, 68, 69, 70, 71, 72, 76, 86, 87, 
                         88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 105, 106, 
                         107, 108, 109, 110, 113, 114, 119, 122, 123, 124,
                         125, 126, 128, 137, 138, 139, 140, 141, 143, 145,
                         147, 148, 152, 153, 154, 155, 156, 165, 169, 170, 
                         171, 175, 177, 178, 180, 182, 183, 184, 187, 193,
                         194, 195, 196, 197, 198, 199, 200, 251, 252, 253, 
                         254, 255, 256 ,257, 258, 259, 260, 261, 262, 263, 264, 
                         265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
                         276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286,
                         287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297,
                         298, 299, 300),]

test_set <-test_set[ c(2, 14, 15, 16, 18, 19, 20, 21, 24, 25, 26, 27, 28, 32, 
                       40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57,
                       58, 59, 60, 61, 62, 63, 73, 74, 75, 77, 78, 79, 80, 81,
                       82, 83, 84, 85, 94, 95, 97, 98, 102, 103, 104, 111, 112, 
                       115, 116, 117, 118, 120, 121, 127, 129, 130, 131, 132, 
                       133, 134, 135, 136, 142, 144, 146, 149, 150, 151, 157, 
                       158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 
                       172, 173, 174, 176, 179, 181, 185, 186, 188, 189, 190, 
                       191, 192, 201, 202, 203, 204, 205, 206, 207, 208, 209, 
                       210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 
                       221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 
                       232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 
                       243,244, 245, 246, 247, 248, 249, 250),]



train_set$y_true <- as.character(train_set$y_true)
train_set$y_true <- as.factor(train_set$y_true)

test_set$y_true <- as.character(test_set$y_true)
test_set$y_true <- as.factor(test_set$y_true)

################################################### feature selection
boruta_output <- Boruta(y_true ~ 
                          nose_dif + 
                          neck_dif + 
                          Rshoulder_dif +
                          Relbow_dif +
                          Rwrist_dif +  
                          Lshoulder_dif + 
                          Lelbow_dif +
                          Lwrist_dif + 
                          MidHip_dif + 
                          Rhip_dif + 
                          LHip_dif + 
                          REye_dif + 
                          LEye_diff + 
                          REar_diff + 
                          LEar_diff + 
                          mean +
                          RshoulderElbowAngle+
                          lshoulderElbowAngle+
                          YRshoulderWristDiff +
                          YLshoulderWristDiff, 
                        data=na.omit(train_set), doTrace=0)  
boruta_signif <- getSelectedAttributes(boruta_output, withTentative = TRUE)
print(boruta_signif)

roughFixMod <- TentativeRoughFix(boruta_output)
boruta_signif <- getSelectedAttributes(roughFixMod)
print(boruta_signif)

plot(boruta_output, cex.axis=.7, las=2, xlab="", main="Variable Importance")  

# features that will not be used in the decision tree 
# Relbow_dif, Lwrist_dif, LHip_dif, LEar_diff, lshoulderElbowAngle, RshoulderElbowAngle

######################### run the decision tree model ##########################

# tuning the paramters for the base model decision tree
gs <- list(minsplit = c(1:50),
           maxdepth = c(1:30)) %>% 
  cross_df() # Convert to data frame grid
gs

#2, 4, 5, 8, 10
#1, 3,4, 5,6

model <- function(...){
  rpart(formula = y_true ~ nose_dif +
          neck_dif +
          Rshoulder_dif +
          Relbow_dif +
          Rwrist_dif +
          Lshoulder_dif +
          Lelbow_dif +
          Lwrist_dif +
          MidHip_dif +
          Rhip_dif +
          LHip_dif +
          REye_dif +
          LEye_diff +
          REar_diff +
          LEar_diff +
          mean +
          YRshoulderWristDiff +
          YLshoulderWristDiff,
        data = train_set,
        control = rpart.control(...))
}

gs <- gs %>% mutate(fit = pmap(gs, model))
gs

compute_accuracy <- function(fit, test_features, test_labels) {
  predicted <- predict(fit, test_features, type = "class")
  mean(predicted == test_labels)
}

test_features <- test_set %>% select(-y_true)
test_labels   <- test_set$y_true
gs <- gs %>%
  mutate(test_accuracy = map_dbl(fit, compute_accuracy,
                                 test_features, test_labels))
gs

gs <- gs %>% arrange(desc(test_accuracy), desc(minsplit), maxdepth)
gs

############################### base model
model <- rpart(formula = y_true ~ nose_dif +
                 neck_dif +
                 Rshoulder_dif +
                 Relbow_dif +
                 Rwrist_dif +
                 Lshoulder_dif +
                 Lelbow_dif +
                 Lwrist_dif +
                 MidHip_dif +
                 Rhip_dif +
                 LHip_dif +
                 REye_dif +
                 LEye_diff +
                 REar_diff +
                 LEar_diff +
                 mean +
                 YRshoulderWristDiff +
                 YLshoulderWristDiff,
               data = train_set, 
               method = "class",
               minsplit = 45,
               maxdepth = 2,
               parms = list(split = 'information'))

#predict on the test cases
test_set$pred <- predict(object = model,  
                         newdata = test_set,   
                         type = "class")
# saved metrics
base_DT <- confusionMatrix(table(test_set$y_true, test_set$pred))

# tuning the paramters for the extended model decision tree
gs <- list(minsplit = c(1:50),
           maxdepth = c(1:30)) %>% 
  cross_df() # Convert to data frame grid
gs

#2, 4, 5, 8, 10
#1, 3,4, 5,6

model <- function(...){
  rpart(formula = y_true ~ nose_dif +
          neck_dif +
          Rshoulder_dif +
          Relbow_dif +
          Rwrist_dif +
          Lshoulder_dif +
          Lelbow_dif +
          Lwrist_dif +
          MidHip_dif +
          Rhip_dif +
          LHip_dif +
          REye_dif +
          LEye_diff +
          REar_diff +
          LEar_diff +
          mean +
          YRshoulderWristDiff +
          YLshoulderWristDiff +
          RshoulderElbowAngle,
        data = train_set,
        control = rpart.control(...))
}

gs <- gs %>% mutate(fit = pmap(gs, model))
gs

compute_accuracy <- function(fit, test_features, test_labels) {
  predicted <- predict(fit, test_features, type = "class")
  mean(predicted == test_labels)
}

test_features <- test_set %>% select(-y_true)
test_labels   <- test_set$y_true
gs <- gs %>%
  mutate(test_accuracy = map_dbl(fit, compute_accuracy,
                                 test_features, test_labels))
gs

gs <- gs %>% arrange(desc(test_accuracy), desc(minsplit), maxdepth)
gs

##################################### extended model
model <- rpart(formula = y_true ~ nose_dif +
                 neck_dif +
                 Rshoulder_dif +
                 Relbow_dif +
                 Rwrist_dif +
                 Lshoulder_dif +
                 Lelbow_dif +
                 Lwrist_dif +
                 MidHip_dif +
                 Rhip_dif +
                 LHip_dif +
                 REye_dif +
                 LEye_diff +
                 REar_diff +
                 LEar_diff +
                 mean +
                 YRshoulderWristDiff +
                 YLshoulderWristDiff +
                 RshoulderElbowAngle+
                 lshoulderElbowAngle,
               data = train_set, 
               method = "class",
               minsplit = 45,
               maxdepth = 2,
               parms = list(split = 'information'))


#predict on the test cases
test_set$pred <- predict(object = model,  
                         newdata = test_set,   
                         type = "class")
# saved metrics
extended_DT <- confusionMatrix(table(test_set$y_true, test_set$pred))

######################## run the SVM model ####################################

# SVM tuning for the base model
#tuning
svm_model1 <- tune(svm , y_true ~ nose_dif +
                     neck_dif +
                     Rshoulder_dif +
                     Relbow_dif +
                     Rwrist_dif +
                     Lshoulder_dif +
                     Lelbow_dif +
                     Lwrist_dif +
                     MidHip_dif +
                     Rhip_dif +
                     LHip_dif +
                     REye_dif +
                     LEye_diff +
                     REar_diff +
                     LEar_diff +
                     mean +
                     YRshoulderWristDiff +
                     YLshoulderWristDiff,
                   data = train_set, 
                   kernel = "radial" , 
                   type = "C-classification", 
                   ranges = list(gamma = c(0.1, 0.001), 
                                 cost = c(10:100)))

summary(svm_model1)

# run the base model SVM
svm1 = svm(formula = y_true ~ nose_dif +
             neck_dif +
             Rshoulder_dif +
             Relbow_dif +
             Rwrist_dif +
             Lshoulder_dif +
             Lelbow_dif +
             Lwrist_dif +
             MidHip_dif +
             Rhip_dif +
             LHip_dif +
             REye_dif +
             LEye_diff +
             REar_diff +
             LEar_diff + 
             mean +
             YRshoulderWristDiff +
             YLshoulderWristDiff,
           data = train_set,
           type = 'C-classification', 
           kernel = 'radial',
           gamma = 0.1,
           cost = 11) 

summary(svm1)

# behaviour on the test set
prediction <- predict(svm1, test_set)
xtab <- table(test_set$y_true, prediction)
xtab

# compute all metrics on the test set predictions
# saved metrics
base_svm <- ml_test(prediction, true_lab, output.as.table = FALSE)

diagonal.counts <- diag(xtab)
N <- sum(xtab)
row.marginal.props <- rowSums(xtab)/N
col.marginal.props <- colSums(xtab)/N
# Compute kappa (k)
Po <- sum(diagonal.counts)/N
Pe <- sum(row.marginal.props*col.marginal.props)
k <- (Po - Pe)/(1 - Pe)
k

# SVM tuning for the extended model
#tuning
svm_model1 <- tune(svm , y_true ~ nose_dif +
                     neck_dif +
                     Rshoulder_dif +
                     Relbow_dif +
                     Rwrist_dif +
                     Lshoulder_dif +
                     Lelbow_dif +
                     Lwrist_dif +
                     MidHip_dif +
                     Rhip_dif +
                     LHip_dif +
                     REye_dif +
                     LEye_diff +
                     REar_diff +
                     LEar_diff +
                     mean +
                     YRshoulderWristDiff +
                     YLshoulderWristDiff +
                     lshoulderElbowAngle,
                   data = train_set, 
                   kernel = "radial" , 
                   type = "C-classification", 
                   ranges = list(gamma = c(0.1, 0.001), 
                                 cost = c(10:100)))

summary(svm_model1)

# run the extended model SVM
svm1 = svm(formula = y_true ~ nose_dif +
             neck_dif +
             Rshoulder_dif +
             Relbow_dif +
             Rwrist_dif +
             Lshoulder_dif +
             Lelbow_dif +
             Lwrist_dif +
             MidHip_dif +
             Rhip_dif +
             LHip_dif +
             REye_dif +
             LEye_diff +
             REar_diff +
             LEar_diff +
             mean +
             YRshoulderWristDiff +
             YLshoulderWristDiff +
             lshoulderElbowAngle,
           data = train_set,
           type = 'C-classification', 
           kernel = 'radial',
           gamma = 0.1,
           cost = 18) 

summary(svm1)

# behaviour on the test set
prediction <- predict(svm1, test_set)
xtab <- table(test_set$y_true, prediction)
xtab

diagonal.counts <- diag(xtab)
N <- sum(xtab)
row.marginal.props <- rowSums(xtab)/N
col.marginal.props <- colSums(xtab)/N
# Compute kappa (k)
Po <- sum(diagonal.counts)/N
Pe <- sum(row.marginal.props*col.marginal.props)
k <- (Po - Pe)/(1 - Pe)
k

# saved metrics
extended_svm <- ml_test(prediction, true_lab, output.as.table = FALSE)

###############################################################################
################### for the seccond check no negative #########################
###############################################################################

#create a train and test set
train_set <- least_body_distance
test_set <- least_body_distance

# convert outcome variable from characters to numbers
train_set <- train_set %>%
  mutate(y_true = case_when(
    y_true == 'handShake'  ~ 0,
    y_true == 'highFive'  ~ 1,
    y_true == 'hug'  ~ 2,
    y_true == 'kiss' ~ 3,
    y_true == 'negative' ~ 4))

test_set <- test_set %>%
  mutate(y_true = case_when(
    y_true == 'handShake'  ~ 0,
    y_true == 'highFive'  ~ 1,
    y_true == 'hug'  ~ 2,
    y_true == 'kiss' ~ 3,
    y_true == 'negative' ~ 4))


train_set <- train_set[c(1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 22, 23, 
                         29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 52, 53, 54, 
                         55, 64, 65, 66, 67, 68, 69, 70, 71, 72, 76, 86, 87, 
                         88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 105, 106, 
                         107, 108, 109, 110, 113, 114, 119, 122, 123, 124,
                         125, 126, 128, 137, 138, 139, 140, 141, 143, 145,
                         147, 148, 152, 153, 154, 155, 156, 165, 169, 170, 
                         171, 175, 177, 178, 180, 182, 183, 184, 187, 193,
                         194, 195, 196, 197, 198, 199, 200),]

test_set <-test_set[ c(2, 14, 15, 16, 18, 19, 20, 21, 24, 25, 26, 27, 28, 32, 
                       40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57,
                       58, 59, 60, 61, 62, 63, 73, 74, 75, 77, 78, 79, 80, 81,
                       82, 83, 84, 85, 94, 95, 97, 98, 102, 103, 104, 111, 112, 
                       115, 116, 117, 118, 120, 121, 127, 129, 130, 131, 132, 
                       133, 134, 135, 136, 142, 144, 146, 149, 150, 151, 157, 
                       158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 
                       172, 173, 174, 176, 179, 181, 185, 186, 188, 189, 190, 
                       191, 192),]



train_set$y_true <- as.character(train_set$y_true)
train_set$y_true <- as.factor(train_set$y_true)

test_set$y_true <- as.character(test_set$y_true)
test_set$y_true <- as.factor(test_set$y_true)

########################### feature selection ##################################
boruta_output <- Boruta(y_true ~ 
                          nose_dif + 
                          neck_dif + 
                          Rshoulder_dif +
                          Relbow_dif +
                          Rwrist_dif +  
                          Lshoulder_dif + 
                          Lelbow_dif +
                          Lwrist_dif + 
                          MidHip_dif + 
                          Rhip_dif + 
                          LHip_dif + 
                          REye_dif + 
                          LEye_diff + 
                          REar_diff + 
                          LEar_diff + 
                          mean +
                          RshoulderElbowAngle+
                          lshoulderElbowAngle+
                          YRshoulderWristDiff +
                          YLshoulderWristDiff, 
                        data=na.omit(train_set), doTrace=0)  
boruta_signif <- getSelectedAttributes(boruta_output, withTentative = TRUE)
print(boruta_signif)


roughFixMod <- TentativeRoughFix(boruta_output)
boruta_signif <- getSelectedAttributes(roughFixMod)
print(boruta_signif)


borplot <- plot(boruta_output, 
                cex.axis=.7, 
                las=2, 
                xlab="", 
                main="Variable Importance")  

######################### run the decision tree model ##########################

# decision tree tuning  no negative 
gs <- list(minsplit = c(2, 4, 5, 8, 10),
           maxdepth = c(1, 3,4, 5,6)) %>% 
  cross_df() # Convert to data frame grid
gs

model <- function(...){
  rpart(formula = y_true ~ nose_dif +
          neck_dif +
          Rshoulder_dif +
          Relbow_dif +
          Rwrist_dif +
          Lshoulder_dif +
          MidHip_dif +
          Rhip_dif +
          LHip_dif +
          REye_dif +
          LEye_diff +
          REar_diff +
          LEar_diff + 
          mean +
          lshoulderElbowAngle +
          YRshoulderWristDiff +
          YLshoulderWristDiff,
        data = train_set,
        control = rpart.control(...))
}

gs <- gs %>% mutate(fit = pmap(gs, model))
gs

compute_accuracy <- function(fit, test_features, test_labels) {
  predicted <- predict(fit, test_features, type = "class")
  mean(predicted == test_labels)
}

test_features <- test_set %>% select(-y_true)
test_labels   <- test_set$y_true
gs <- gs %>%
  mutate(test_accuracy = map_dbl(fit, compute_accuracy,
                                 test_features, test_labels))
gs

gs <- gs %>% arrange(desc(test_accuracy), desc(minsplit), maxdepth)
gs

# decision tree model
model <- rpart(formula = y_true ~ nose_dif +
                 neck_dif +
                 Rshoulder_dif +
                 Relbow_dif +
                 Rwrist_dif +
                 Lshoulder_dif +
                 MidHip_dif +
                 Rhip_dif +
                 LHip_dif +
                 REye_dif +
                 LEye_diff +
                 REar_diff +
                 LEar_diff + 
                 mean +
                 lshoulderElbowAngle +
                 YRshoulderWristDiff +
                 YLshoulderWristDiff,
               data = train_set, 
               method = "class",
               minsplit = 10,
               maxdepth = 4,
               parms = list(split = 'information'))

#predict on the test cases
test_set$pred <- predict(object = model,  
                         newdata = test_set,   
                         type = "class")
# saved metrics
DT_noNeg <- confusionMatrix(table(test_set$y_true, test_set$pred))

########################### run the SVM model ################################## 

# SVM tuning no negative
svm_model1 <- tune(svm , y_true ~ nose_dif +
                     neck_dif +
                     Rshoulder_dif +
                     Relbow_dif +
                     Rwrist_dif +
                     Lshoulder_dif +
                     MidHip_dif +
                     Rhip_dif +
                     LHip_dif +
                     REye_dif +
                     LEye_diff +
                     REar_diff +
                     LEar_diff + 
                     mean +
                     lshoulderElbowAngle +
                     YRshoulderWristDiff +
                     YLshoulderWristDiff,
                   data = train_set, 
                   kernel = "radial" , 
                   type = "C-classification", 
                   ranges = list(gamma = c(0.1, 0.001), 
                                 cost = c(10:100)))

summary(svm_model1)

# svm model no negative
svm1 = svm(formula = y_true ~ nose_dif +
             neck_dif +
             Rshoulder_dif +
             Relbow_dif +
             Rwrist_dif +
             Lshoulder_dif +
             MidHip_dif +
             Rhip_dif +
             LHip_dif +
             REye_dif +
             LEye_diff +
             REar_diff +
             LEar_diff + 
             mean +
             lshoulderElbowAngle +
             YRshoulderWristDiff +
             YLshoulderWristDiff,
           data = train_set,
           type = 'C-classification', 
           kernel = 'radial',
           gamma = 0.001,
           cost = 92) 

summary(svm1)

# behaviour on the test set
prediction <- predict(svm1, test_set)
xtab <- table(test_set$y_true, prediction)
xtab

# saved metrics
svm_noNeg <- ml_test(prediction, test_set$y_true , output.as.table = FALSE)

diagonal.counts <- diag(xtab)
N <- sum(xtab)
row.marginal.props <- rowSums(xtab)/N
col.marginal.props <- colSums(xtab)/N
# Compute kappa (k)
Po <- sum(diagonal.counts)/N
Pe <- sum(row.marginal.props*col.marginal.props)
k <- (Po - Pe)/(1 - Pe)
k

################################################################################
######################## getting al the metrics ################################
base_DT
extended_DT
base_svm
extended_svm
DT_noNeg
svm_noNeg

